openapi: 3.0.3
info:
  title: Rack Dev Insight Internal API
  description: |-
    This is an internal API specification for Rack Dev Insight.
    It is used for communication between the Rack Dev Insight gem and Chrome extension.
  termsOfService: https://github.com/takaebato/rack-dev_insight/blob/master/CODE_OF_CONDUCT.md
  contact:
    email: takahiro.ebato@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Gem and Chrome extension
  url: https://github.com/takaebato/rack-dev_insight
servers:
  - url: http://localhost:8081
    description: Local development server
tags:
  - name: Result
    description: Result of analyzed request
paths:
  /rack-dev-insight-results/{uuid}:
    get:
      tags:
        - Result
      summary: Get rack dev insight result
      description: Get result by uuid
      operationId: getRackDevInsightResult
      parameters:
        - in: path
          name: uuid
          description: UUID of result to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackDevInsightResult'
              examples:
                Basic:
                  $ref: '#/components/examples/Basic'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 404
                message: Result not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 500
                message: Internal server error
      security: [ ]
components:
  schemas:
    RackDevInsightResult:
      description: Result of analyzed request
      type: object
      additionalProperties: false
      required:
        - id
        - status
        - method
        - path
        - duration
        - sql
        - apis
      properties:
        id:
          description: Result id
          type: string
          format: uuid
        status:
          description: Http status code
          type: integer
          format: int32
        method:
          description: Http method
          type: string
        path:
          description: Http path
          type: string
        duration:
          description: Request duration in milliseconds
          type: number
          format: float
        sql:
          $ref: '#/components/schemas/Sql'
        apis:
          description: Api requests and responses
          type: array
          items:
            $ref: '#/components/schemas/Api'
    Sql:
      description: Sql queries
      type: object
      additionalProperties: false
      required:
        - crudAggregations
        - normalizedAggregations
        - erroredQueries
        - queries
      properties:
        crudAggregations:
          type: array
          items:
            $ref: '#/components/schemas/CrudAggregation'
        normalizedAggregations:
          type: array
          items:
            $ref: '#/components/schemas/NormalizedAggregation'
        erroredQueries:
          type: array
          items:
            $ref: '#/components/schemas/ErroredQuery'
        queries:
          type: array
          items:
            $ref: '#/components/schemas/Query'
    CrudAggregation:
      description: Aggregation of queries in terms of CRUD type and table
      type: object
      additionalProperties: false
      required:
        - id
        - type
        - table
        - count
        - duration
        - queryIds
      properties:
        id:
          description: Crud aggregation id
          type: integer
          format: int32
        type:
          description: CRUD type
          type: string
          enum:
            - CREATE
            - READ
            - UPDATE
            - DELETE
        table:
          description: Table name
          type: string
        count:
          description: Number of queries
          type: integer
        duration:
          description: Total duration in milliseconds
          type: number
          format: float
        queryIds:
          description: Corresponding query ids
          type: array
          items:
            type: integer
            format: int32
    NormalizedAggregation:
      description: Aggregation of queries in terms of normalized sql statement
      type: object
      additionalProperties: false
      required:
        - id
        - statement
        - count
        - duration
        - queryIds
      properties:
        id:
          description: Normalized aggregation id
          type: integer
          format: int32
        statement:
          description: Normalized sql statement
          type: string
        count:
          description: Number of queries
          type: integer
        duration:
          description: Total duration in milliseconds
          type: number
          format: float
        queryIds:
          description: Corresponding query ids
          type: array
          items:
            type: integer
    ErroredQuery:
      description: Query errored on parsing
      type: object
      additionalProperties: false
      required:
        - id
        - message
        - statement
        - backtrace
        - duration
      properties:
        id:
          description: Errored query id
          type: integer
          format: int32
        message:
          description: Error message
          type: string
        statement:
          description: Sql statement
          type: string
        backtrace:
          description: Backtrace
          type: array
          items:
            $ref: '#/components/schemas/TraceInfo'
        duration:
          description: Query duration in milliseconds
          type: number
          format: float
    Query:
      description: Single sql query
      type: object
      additionalProperties: false
      required:
        - id
        - statement
        - binds
        - backtrace
        - duration
      properties:
        id:
          description: Query id
          type: integer
          format: int32
        statement:
          description: Sql statement
          type: string
        binds:
          description: Sql statement bind parameters
          type: string
        backtrace:
          description: Backtrace
          type: array
          items:
            $ref: '#/components/schemas/TraceInfo'
        duration:
          description: Query duration in milliseconds
          type: number
          format: float
    Api:
      description: Api request and response
      type: object
      additionalProperties: false
      required:
        - id
        - status
        - method
        - url
        - duration
        - requestHeaders
        - requestBody
        - responseHeaders
        - responseBody
        - backtrace
      properties:
        id:
          description: Api id
          type: integer
          format: int32
        status:
          description: Http status code
          type: integer
          format: int32
        method:
          description: Http method
          type: string
        url:
          description: Full url
          type: string
        duration:
          description: Request duration in milliseconds
          type: number
          format: float
        requestHeaders:
          description: Request headers
          type: array
          items:
            $ref: '#/components/schemas/Header'
        requestBody:
          description: Request body
          type: string
          nullable: true
        responseHeaders:
          description: Response headers
          type: array
          items:
            $ref: '#/components/schemas/Header'
        responseBody:
          description: Response body
          type: string
        backtrace:
          description: Backtrace
          type: array
          items:
            $ref: '#/components/schemas/TraceInfo'
    Header:
      description: Http header
      type: object
      additionalProperties: false
      required:
        - field
        - value
      properties:
        field:
          description: Header field
          type: string
        value:
          description: Header value
          type: string
    TraceInfo:
      description: Trace info
      type: object
      additionalProperties: false
      required:
        - original
        - path
        - line
      properties:
        original:
          description: Original trace info
          type: string
        path:
          description: File path
          type: string
        line:
          description: Line number
          type: integer
          format: int32
    Error:
      description: Error
      type: object
      additionalProperties: false
      required:
        - status
        - message
      properties:
        status:
          description: Http status code
          type: integer
          format: int32
        message:
          description: Error message
          type: string
  examples:
    Basic:
      summary: Basic example
      value:
        id: 123e4567-e89b-12d3-a456-426614174000
        status: 200
        method: GET
        path: /api/v1/users
        duration: 100.0
        sql:
          crudAggregations:
            - id: 1
              type: CREATE
              table: users
              count: 1
              duration: 10
              queryIds: [ 1 ]
            - id: 2
              type: READ
              table: users
              count: 1
              duration: 10
              queryIds: [ 2 ]
            - id: 3
              type: UPDATE
              table: users
              count: 1
              duration: 10
              queryIds: [ 3 ]
            - id: 4
              type: DELETE
              table: users
              count: 2
              duration: 30
              queryIds: [ 4, 5 ]
          normalizedAggregations:
            - id: 1
              statement: INSERT INTO users (first_name, last_name, email, password, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW()), (?, ?, ?, ?, NOW(), NOW()), (?, ?, ?, ?, NOW(), NOW())
              count: 1
              duration: 10
              queryIds: [ 1 ]
            - id: 2
              statement: SELECT * FROM users WHERE id = ?
              count: 1
              duration: 10
              queryIds: [ 2 ]
            - id: 3
              statement: UPDATE users SET name = ? WHERE id = ?
              count: 1
              duration: 10
              queryIds: [ 3 ]
            - id: 4
              statement: DELETE FROM users WHERE id = ?
              count: 2
              duration: 30
              queryIds: [ 4, 5 ]
          erroredQueries:
            - id: 1
              message: 'Syntax error'
              statement: SELECT * FROM users WHERE id = 2
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
            - id: 2
              message: 'Parser error'
              statement: UPDATE users SET name  = 'Jack' WHERE id = 1
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
            - id: 3
              message: 'Parser error'
              statement: DELETE FROM users WHERE id = 1
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
          queries:
            - id: 1
              statement: |
                INSERT INTO users (first_name, last_name, email, password, created_at, updated_at) VALUES
                ('John', 'Doe', 'john.doe@example.com', 'johnspassword', NOW(), NOW()),
                ('Jane', 'Doe', 'jane.doe@example.com', 'janespassword', NOW(), NOW()),
                ('Jim', 'Beam', 'jim.beam@example.com', 'jimspassword', NOW(), NOW());
              binds: ''
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
                - original: app/models/user.rb:120:in `normalize_name'
                  path: app/models/user.rb
                  line: 120
                - original: app/helpers/user_helper.rb:10:in `formatted_name'
                  path: app/helpers/user_helper.rb
                  line: 10
                - original: app/views/users/show.html.erb:15:in `_app_views_users_show_html_erb__1234567890'
                  path: app/views/users/show.html.erb
                  line: 15
                - original: app/middleware/custom_middleware.rb:30:in `call'
                  path: app/middleware/custom_middleware.rb
                  line: 30
              duration: 10
            - id: 2
              statement: SELECT * FROM users WHERE id = 2
              binds: ''
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
            - id: 3
              statement: UPDATE users SET name  = 'Jack' WHERE id = 1
              binds: ''
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
            - id: 4
              binds: ''
              statement: DELETE FROM users WHERE id = 1
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
            - id: 5
              statement: DELETE FROM users WHERE id = 2
              binds: ''
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 20
            - id: 6
              statement: SELECT * FROM users WHERE id = 3
              binds: ''
              backtrace:
                - original: app/controllers/users_controller.rb:25:in `show'
                  path: app/controllers/users_controller.rb
                  line: 25
                - original: app/services/user_fetch_service.rb:15:in `find_by_id'
                  path: app/services/user_fetch_service.rb
                  line: 15
              duration: 10
        apis:
          - status: 200
            method: POST
            url: https://example.com/api/v1/users
            duration: 100
            requestHeaders:
              - field: User-Agent
                value: CustomServerClient/1.2.3
              - field: Content-Type
                value: application/json; charset=utf-8
              - field: Content-Length
                value: '123456'
              - field: Date
                value: Sat, 08 Oct 2023 00:00:00 GMT
            requestBody: '{"name": "doggie", "photoUrls": ["url1", "url2"]}'
            responseHeaders:
              - field: Server
                value: TargetServer/4.3.2
              - field: Content-Type
                value: application/json; charset=utf-8
              - field: Content-Length
                value: '34567'
              - field: Date
                value: Sat, 08 Oct 2023 00:00:00 GMT
            responseBody: '{"name": "doggie", "photoUrls": ["url1", "url2"]}'
            backtrace:
              - original: app/services/user_post_service.rb:15:in `create'
                path: app/services/user_post_service.rb
                line: 15
              - original: app/controllers/users_controller.rb:25:in `create'
                path: app/controllers/users_controller.rb
                line: 25
